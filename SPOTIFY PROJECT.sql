SELECT * FROM public.spotify
--Advanced SQL Project -- Spotify Datasets

DROP TABLE IF EXISTS spotify;
CREATE TABLE spotify (
    artist VARCHAR(255),
    track VARCHAR(255),
    album VARCHAR(255),
    album_type VARCHAR(50),
    danceability FLOAT,
    energy FLOAT,
    loudness FLOAT,
    speechiness FLOAT,
    acousticness FLOAT,
    instrumentalness FLOAT,
    liveness FLOAT,
    valence FLOAT,
    tempo FLOAT,
    duration_min FLOAT,
    title VARCHAR(255),
    channel VARCHAR(255),
    views FLOAT,
    likes BIGINT,
    comments BIGINT,
    licensed BOOLEAN,
    official_video BOOLEAN,
    stream BIGINT,
    energy_liveness FLOAT,
    most_played_on VARCHAR(50)
);


--EDA
SELECT COUNT(*) FROM SPOTIFY;

SELECT COUNT(DISTINCT ARTIST) FROM SPOTIFY;

SELECT COUNT(DISTINCT ALBUM) FROM SPOTIFY;

SELECT DISTINCT ALBUM_TYPE FROM SPOTIFY;

SELECT DURATION_MIN FROM SPOTIFY;

SELECT MAX(DURATION_MIN) FROM SPOTIFY;

SELECT * FROM SPOTIFY WHERE DURATION_MIN=0;

DELETE FROM SPOTIFY WHERE DURATION_MIN=0;

SELECT * FROM SPOTIFY WHERE DURATION_MIN=0;

SELECT DISTINCT CHANNEL FROM SPOTIFY;

SELECT DISTINCT MOST_PLAYED_ON FROM SPOTIFY;

-- -------------------------------------------------
--DATA ANALYSIS - EASY CATEGORY
-- -------------------------------------------------

--Q.1 RETRIEVE THE NAMES OF ALL TRACKS THAT HAVE MORE THAN 1 BILLION STREAMS.

SELECT * FROM SPOTIFY WHERE STREAM>1000000000;

--Q.2 LIST ALL ALBUMS ALONG WITH THEIR RESPECTIVE ARTISTS.

SELECT ALBUM,ARTIST FROM SPOTIFY;

--Q.3 GET THE TOTAL NUMBER OF COMMENTS FOR TRACKERS WHERE LICENSED = TRUE.

SELECT SUM(COMMENTS) AS TOTAL_COMMENTS FROM SPOTIFY WHERE LICENSED = 'true';

--Q.4 FIND ALL TRACKS THAT BELONG TO THE ALBUM TYPE SINGLE.

SELECT * FROM SPOTIFY WHERE ALBUM_TYPE = 'single';

--Q.5 COUNT THE TOTAL NUMBER OF TRACKS BY EACH ARTIST.

SELECT ARTIST,COUNT(*) AS TOTAL_NO_SONGS FROM SPOTIFY GROUP BY ARTIST ORDER BY 2 DESC;


-----------------------------------------------------------------------------------------
--MEDIUM LEVEL QUESTION.
-----------------------------------------------------------------------------------------

--Q.1 CALCULATE THE AVERAGE DANCEABILITY OF TRACKS IN EACH ALBUM.

SELECT ALBUM,AVG(DANCEABILITY) AS AVG_DANCEABILITY FROM SPOTIFY GROUP BY 1 ORDER BY 2 DESC;


--Q.2 FIND THE TOP 5 TRACKS WITH THE HIGHEST ENERGY VALUES.

SELECT TRACK,MAX(ENERGY)  FROM SPOTIFY GROUP BY 1 ORDER BY 2 DESC LIMIT 5;

--Q.3 LIST ALL TRACKS ALONG WITH THEIR VIEWS AND LIKE OFFICIAL_VIDEO = TRUE.

SELECT TRACK,
SUM(VIEWS) AS TOTAL_VIEWS,
SUM(LIKES) AS TOTAL_LIKES
FROM SPOTIFY
WHERE OFFICIAL_VIDEO = 'true'
GROUP BY 1
ORDER BY 2 DESC;

--Q.4 FOR EACH ALBUM, CALCULATE THE TOTAL VIEWS OF ALL ASSOCIATED TRACKS.

SELECT ALBUM,TRACK,SUM(VIEWS) FROM SPOTIFY GROUP BY 1, 2 ORDER BY 3 DESC;

--Q.5 RETRIEVE THE TRACK NAMES THAT HAVE BEEN STREAMED ON SPOTIFY MORE THAN YOUTUBE.

SELECT * FROM(SELECT TRACK,
COALESCE(SUM(CASE WHEN MOST_PLAYED_ON = 'YouTube' THEN STREAM END),0) AS STREAMED_ON_YOUTUBE,
COALESCE(SUM(CASE WHEN MOST_PLAYED_ON = 'Spotify' THEN STREAM END),0) AS STREAMED_ON_SPOTIFY 
FROM SPOTIFY GROUP BY 1) AS T1 WHERE STREAMED_ON_SPOTIFY > STREAMED_ON_YOUTUBE
AND STREAMED_ON_YOUTUBE <> 0;

-- ------------------------------------------------------------------------------------------
-- ADVANCED PROBLEMS
-- ------------------------------------------------------------------------------------------

--Q.1 FIND THE TOP 3 MOST-VIEWED TRACKS FOR EACH ARTIST USING WINDOW FUNCTIONS.

--EACH ARTIST AND TOTAL VIEW FOR EACH TRACK
--TRACK WITH HIGHEST VIEW FOR EACH ARTIST (WE NEED TOP)
--DENSE RANK
--CTE AND FILDER RANK <=3

WITH RANKING_ARTIST AS (SELECT ARTIST,TRACK,SUM(VIEWS) AS TOTAL_VIEW,
DENSE_RANK() OVER(PARTITION BY ARTIST ORDER BY SUM(VIEWS)DESC) AS RANK
FROM SPOTIFY GROUP BY 1,2 ORDER BY 1,3 DESC) SELECT * FROM RANKING_ARTIST WHERE RANK<=3;

--Q.2 WRITE A QUERY TO FIND TRACKS WHERE THE LIVENESS SCORE IS ABOVE THE AVERAGE.

SELECT TRACK,ARTIST,LIVENESS
FROM SPOTIFY
WHERE LIVENESS > (SELECT AVG (LIVENESS) FROM SPOTIFY)

--Q.3 USE A WITH CLAUSE TO CALCULATE THE DIFFERENCE BETWEEN THE HIGHEST AND LOWEST ENERGY VALUES FOR TRACKS IN EACH ALBUM.

WITH CTE
AS
(SELECT ALBUM,
MAX(ENERGY) AS HIGHEST_ENERGY,
MIN(ENERGY) AS LOWEST_ENERGY
FROM SPOTIFY
GROUP BY 1)
SELECT ALBUM,HIGHEST_ENERGY-LOWEST_ENERGY AS ENERGY_DIFF
FROM CTE
ORDER BY 2 DESC;










